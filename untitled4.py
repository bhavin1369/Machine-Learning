# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MTC5qnlRDOHD5AKDY7ZDOGbq0nTBkq6D
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

data=pd.read_csv('/content/exp-1_train.csv')

data.shape

data.head()

data.describe()

data.isnull().sum()

data.isnull().sum()/data.shape[0]*100

x=data.iloc[0:700,0:1]
y=data.iloc[0:700,1:2]

x.boxplot(column=['x'])

y.boxplot(column=['y'])

#plot the scatter plot
plt.scatter(x,y)
plt.xlabel('x')
plt.xlabel('y')
plt.title("X vs Y")

#linear regression
def hypothesis(theta_array,x):
  return theta_array[0]+theta_array[1]*x
def cost_funtion(theta_array,x,y,m):
  sum=0
  for i in range(m):
    sum=sum+((theta_array[0]+theta_array[1]*x[i])-y[i])**2

  return sum/(2*m)

def gradiant_descent(theta_array,x,y,m,alpha):
  summation_0=0
  summation_1=0
  for i in range(m):
    summation_0=summation_0+((theta_array[0]+theta_array[1]*x[i])-y[i])
    summation_1=summation_1+x[i]*((theta_array[0]+theta_array[1]*x[i])-y[i])
  new_theta0=theta_array[0]-(alpha/m)*summation_0
  new_theta1=theta_array[1]-(alpha/m)*summation_1
  updated_new_theta=[new_theta0,new_theta1]
  return updated_new_theta

def training(x,y,alpha,iters):
  theta0=0
  theta1=0
  theta_array=[theta0,theta1]
  cost_values=[]
  m=x.size
  for i in range(iters):
    theta_array=gradiant_descent(theta_array,x,y,m,alpha)
    cost_values.append(cost_funtion(theta_array,x,y,m))
    y_predict=x*theta_array[1]+theta_array[0]
    plt.plot(y_predict,x,'r')
    plt.scatter(x,y)
    plt.show()
  return cost_values,theta_array

#feeding the output data
train_data=data.dropna()

train_data.shape

x_val=train_data['x']
y_val=train_data['y']

type(x_val)

x_val=x_val.values.reshape(x_val.size)
y_val=y_val.values.reshape(y_val.size)

type(x_val)

alpha=0.0001
itres=50
cost_val,theta_array=training(x_val,y_val,alpha,itres)
x_axis=np.arange(0,len(cost_val),step=1)
plt.plot(x_axis,cost_val)
plt.xlabel("ites")
plt.ylabel("Cost_val")
plt.title("Loss graph")
plt.show()
print(theta_array)
hypothesis(theta_array,54.0)

#observer cost funtion curve alpha=0.000