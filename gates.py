# -*- coding: utf-8 -*-
"""gates

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CX7kBXZlZ5oM5AMyDF3e1O6vCeIzgb5K
"""

# Logic gates implementation in Python

def AND(a, b):
    return a & b

def OR(a, b):
    return a | b

def NOT(a):
    return (~a) & 1  # ensure result is 0 or 1

def NAND(a, b):
    return NOT(AND(a, b))

def NOR(a, b):
    return NOT(OR(a, b))

def XOR(a, b):
    return a ^ b

def XNOR(a, b):
    return NOT(XOR(a, b))


def truth_table_2inputs(gate_fn, name):
    print(f"Truth table for {name}:")
    print("A B | Out")
    for a in (0, 1):
        for b in (0, 1):
            out = gate_fn(a, b)
            print(f"{a} {b} |  {out}")
    print()

def truth_table_1input(gate_fn, name):
    print(f"Truth table for {name}:")
    print("A | Out")
    for a in (0, 1):
        out = gate_fn(a)
        print(f"{a} |  {out}")
    print()


def main():
    # 2-input gates
    truth_table_2inputs(AND, "AND")
    truth_table_2inputs(OR, "OR")
    truth_table_2inputs(NAND, "NAND")
    truth_table_2inputs(NOR, "NOR")
    truth_table_2inputs(XOR, "XOR")
    truth_table_2inputs(XNOR, "XNOR")
    # 1-input gate
    truth_table_1input(NOT, "NOT")

    # Example usage
    a, b = 1, 0
    print("Example: a=1, b=0")
    print("AND:", AND(a, b))
    print("OR:", OR(a, b))
    print("NOT a:", NOT(a))
    print("NAND:", NAND(a, b))
    print("NOR:", NOR(a, b))
    print("XOR:", XOR(a, b))
    print("XNOR:", XNOR(a, b))

