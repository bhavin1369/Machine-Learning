# -*- coding: utf-8 -*-
"""Kmean

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_OA78cW9r7dAChDkOTT-7fyPKDEnv5rx
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
url = "https://raw.githubusercontent.com/nishithkotak/machine-learning/refs/heads/master/KMeans.csv"
dataset = pd.read_csv(url)
dataset

x=dataset.iloc[:,[1,2]].values

import scipy.cluster.hierarchy as sch
dendrogram=sch.dendrogram(sch.linkage(x,method='ward'))
# plt.title('dendrogram')
# plt.xlabel('customers')
# plt.ylabel('euclidean distance')
plt.show()

from sklearn.cluster import AgglomerativeClustering
hc=AgglomerativeClustering(n_clusters=5,linkage='ward')
y_hc=hc.fit_predict(x)

y_hc

#plot the clusters
plt.scatter(x[y_hc==0,0],x[y_hc==0,1],s=100,c='red',label='cluster0')
plt.scatter(x[y_hc==1,0],x[y_hc==1,1],s=100,c='yellow',label='cluster1')
plt.scatter(x[y_hc==2,0],x[y_hc==2,1],s=100,c='blue',label='cluster2')
plt.scatter(x[y_hc==3,0],x[y_hc==3,1],s=100,c='orange',label='cluster3')
plt.scatter(x[y_hc==4,0],x[y_hc==4,1],s=100,c='green',label='cluster4')
plt.legend()

#
from sklearn.cluster import DBSCAN
from sklearn.preprocessing import StandardScaler

x=StandardScaler().fit_transform(x)

db=DBSCAN(eps=0.3,min_samples=6).fit(x)

db.labels_

db.core_sample_indices_

len(set(db.labels_))

#Identify the boundry points
#Visulize the points in following catogary
#1. Noise Points: as black color
#2. All the cluster points as different colors
#2a. core points size > Boundary point size

# Identify core, boundary and noise points
core_samples_mask = np.zeros_like(db.labels_, dtype=bool)
core_samples_mask[db.core_sample_indices_] = True
labels = db.labels_

n_clusters_ = len(set(labels)) - (1 if -1 in labels else 0)
unique_labels = set(labels)

# Plot the points
colors = plt.cm.Spectral(np.linspace(0, 1, len(unique_labels)))

for k, col in zip(unique_labels, colors):
    if k == -1:
        # Black used for noise.
        col = 'k'
        point_size = 6
    else:
      point_size = 14 # Core points size

    class_member_mask = (labels == k)

    # Plot core points
    xy = x[class_member_mask & core_samples_mask]
    plt.plot(xy[:, 0], xy[:, 1], 'o', markerfacecolor=col,
             markeredgecolor='k', markersize=point_size)

    # Plot boundary points
    xy = x[class_member_mask & ~core_samples_mask]
    plt.plot(xy[:, 0], xy[:, 1], 'o', markerfacecolor=col,
             markeredgecolor='k', markersize=6) # Boundary points size

plt.title('Estimated number of clusters: %d' % n_clusters_)
plt.show()

